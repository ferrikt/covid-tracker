{"version":3,"sources":["constants.ts","context/dataContext.tsx","hooks/useDailyUrl.ts","hooks/useTimeSeriesData.ts","context/selectContext.tsx","utils/utils.ts","components/Map.tsx","components/Loading.tsx","components/CenterColumn.tsx","components/Styled.js","components/Header.tsx","components/LeftColumn.tsx","components/CasesList.tsx","components/RightColumn.tsx","components/Dashboard.tsx","theme.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TIMESERIES_CSV_URL","DAILY_BASE_URL","DataContext","createContext","DataContextProvider","children","dailyUrl","useState","dataUrl","setDataUrl","useEffect","getFilesNames","today","Date","files","i","year","getFullYear","month","getMonth","toString","padStart","date","getDate","fileName","push","setDate","a","file","url","Axios","get","status","getUrl","useDailyUrl","console","log","daylyUrl","countriesData","setCountriesData","isLoading","setIsLoading","globalCases","setGlobalCases","lastUpdated","setLastUpdated","countryData","Map","glCases","updatedTime","d3","loadedData","columnCount","Object","keys","length","columns","lastColumnName","prevColumnName","forEach","row","countryName","has","countryCases","updatedCasesToday","Number","updatedCasesYday","yesterday","set","newCases","lat","long","rowActive","rowDeaths","rowRecovered","active","deaths","recovered","fetchTimeSeries","useTimeSeriesData","countryConfirmedTimeSeries","globalConfirmedTimeSeries","Provider","value","error","data","useCountryDataCtx","useContext","Error","SelectContext","useSelectCountryCtx","selectedCountry","setSelectedCountry","handleCountryClick","SelectContextProvider","prev","iterateViaMap","dataClass","dataArray","key","country","getMax","D","ChangeView","props","useMap","setView","center","zoom","getRadius","domain","range","filtered","filter","d","selectedCountryData","find","x","position","icon","divIcon","className","html","iconSize","MapContainer","style","height","width","scrollWheelZoom","TileLayer","attribution","maxZoom","minZoom","Marker","map","radius","Circle","lng","stroke","color","weight","Tooltip","sticky","direction","offset","toLocaleString","Loading","sx","alignItems","justifyContent","strokeWidth","CenterColumn","gridArea","background","marginLeft","gridTemplateRows","flexDirection","border","borderColor","gridTemplateColumns","marginRight","padding","fontSize","fontWeight","size","Title","styled","div","List","ul","ListItem","li","selected","Header","margin","bg","display","LeftColumn","sortedData","sort","b","selectedCountryObj","backgroundColor","overflowY","marginTop","onClick","pickColor","tag","CasesList","globalCount","countryCount","propertyName","definePropertyName","RightColumn","gap","gridTemplate","Dashboard","gridTemplateAreas","theme","fonts","body","heading","monospace","colors","text","primary","red","gray","10","50","200","400","500","600","700","pink","green","purple","fontSizes","xs","sm","md","lg","xl","fontWeights","hairline","thin","light","normal","medium","semibold","bold","extrabold","black","caps","textTransform","letterSpacing","fontFamily","lineHeight","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAAaA,EAIL,yJAOKC,EACT,mH,wECPEC,EAAcC,wBAAqC,IAmC1CC,EA7BiD,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAGzDC,ECViB,WAAe,IAAD,EACPC,mBAAS,IADF,mBAC9BC,EAD8B,KACrBC,EADqB,KAmDrC,OAhDAC,qBAAU,WACN,IAAMC,EAAgB,WAelB,IAFA,IAAMC,EAAQ,IAAIC,KACdC,EAAkB,GACbC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAMC,EAAOJ,EAAMK,cACbC,GAASN,EAAMO,WAAa,GAAGC,WAAWC,SAAS,EAAG,KACtDC,EAAOV,EAAMW,UAAUH,WAAWC,SAAS,EAAG,KAC9CG,EAAQ,UAAMN,EAAN,YAAeI,EAAf,YAAuBN,EAAvB,QACdF,EAAMW,KAAKD,GACXZ,EAAMc,QAAQd,EAAMW,UAAY,GAEpC,OAAOT,GAxBC,4CA2BZ,oCAAAa,EAAA,sDACUb,EAAQH,IADlB,cAGuBG,GAHvB,gEAGec,EAHf,iBAKkBC,EAAM5B,EAAiB2B,EALzC,UAM8BE,IAAMC,IAAIF,GANxC,WAQ2B,MAR3B,OAO+BG,OAP/B,wBASgBvB,EAAWoB,GAT3B,8RA3BY,0DA6CZI,KACD,IAEIzB,EDzCU0B,GAEjBC,QAAQC,IAAR,mBAAwB9B,IALsD,MEPjD,SAC7BuB,EACAQ,GAC8D,IAAD,EACnB9B,mBAA0C,MADvB,mBACtD+B,EADsD,KACvCC,EADuC,OAG3BhC,oBAAS,GAHkB,mBAGtDiC,EAHsD,KAG3CC,EAH2C,OAKvBlC,mBAAS,GALc,mBAKtDmC,EALsD,KAKzCC,EALyC,OAMvBpC,mBAAS,IANc,mBAMtDqC,EANsD,KAMzCC,EANyC,KAQzDC,EAAc,IAAIC,IAsFtB,OApFArC,qBAAU,WAEN+B,GAAa,GACb,IAAIO,EAAU,EACVC,EAAsB,GA6EtBZ,GA3EiB,uCAAG,oCAAAV,EAAA,sEACKuB,IAAOrB,GADZ,cACdsB,EADc,OAGdC,EAAcC,OAAOC,KAAKH,EAAW,IAAII,OACzCC,EAAUL,EAAU,QACpBM,EAAiBD,EAAQJ,EAAc,GACvCM,EAAiBF,EAAQJ,EAAc,GAE7CD,EAAWQ,SAAQ,SAACC,GAChB,IAAMC,EAAcD,EAAI,kBACxB,GAAKd,EAAYgB,IAAID,GASd,CACH,IAAME,EAAejB,EAAYf,IAAI8B,GAC/BG,EAAoBC,OAAOL,EAAIH,IAAmBQ,OAAOF,EAAanD,OACtEsD,EAAmBD,OAAOL,EAAIF,IAAmBO,OAAOF,EAAaI,WAC3ErB,EAAYsB,IAAIP,EAAa,CACzBjD,MAAOoD,EACPG,UAAWD,EACXG,SAAUL,EAAoBE,IAElClB,GAAWiB,OAAOL,EAAIH,SAjBtBX,EAAYsB,IAAIP,EAAa,CACzBjD,MAAOqD,OAAOL,EAAIH,IAClBU,UAAWF,OAAOL,EAAIF,IACtBW,SAAUJ,OAAOL,EAAIH,IAAmBQ,OAAOL,EAAIF,IACnDY,IAAKL,OAAOL,EAAG,KAAWK,OAAOL,EAAG,KAAW,EAC/CW,KAAMN,OAAOL,EAAG,MAAYK,OAAOL,EAAG,MAAY,IAEtDZ,GAAWiB,OAAOL,EAAIH,OAlBV,UAgCIP,IAAOb,GAhCX,eAkCVsB,SAAQ,SAACC,GACf,IAAMC,EAAcD,EAAG,eAElBX,IACDA,EAAcW,EAAG,YAAkBA,EAAG,YAAkB,IAG5D,IAAMY,EAAYP,OAAOL,EAAG,QAAcK,OAAOL,EAAG,QAAc,EAC5Da,EAAYR,OAAOL,EAAG,QAAcK,OAAOL,EAAG,QAAc,EAC5Dc,EAAeT,OAAOL,EAAG,WAAiBK,OAAOL,EAAG,WAAiB,EAE3E,GAAKd,EAAYgB,IAAID,GAQd,CAAC,IAAD,MACGE,EAAejB,EAAYf,IAAI8B,GAE/Bc,EAAM,UAAGZ,EAAaY,cAAhB,QAA0B,EAChCC,EAAM,UAAGb,EAAaa,cAAhB,QAA0B,EAChCC,EAAS,UAAGd,EAAac,iBAAhB,QAA6B,EAE5C/B,EAAYsB,IAAIP,EAAhB,2BACOE,GADP,IAEIY,OAAQA,EAASH,EACjBI,OAAQA,EAASH,EACjBI,UAAWA,EAAYH,UAlB3B5B,EAAYsB,IAAIP,EAAa,CACzBc,OAAQH,EACRI,OAAQH,EACRI,UAAWH,EACXJ,IAAKV,EAAG,IACRW,KAAMX,EAAG,WAkBrBrB,EAAiBO,GACjBL,GAAa,GACbE,EAAeK,GACfH,EAAeI,GAxEK,4CAAH,oDA2EP6B,KACf,CAACjD,EAAKQ,IAEF,CAACC,EAAeI,EAAaE,EAAaJ,GFnFuCuC,CACpF/E,EACAM,GAT0E,mBAOvE0E,EAPuE,KAO3CC,EAP2C,KAOhBrC,EAPgB,KAOHJ,EAPG,KAY9E,OACI,cAACtC,EAAYgF,SAAb,CACIC,MAAO,CACHrC,YAAa,CACTN,YACA4C,MAhBF,gBAiBEC,KAAML,EACNtC,YAAauC,EACbrC,gBAPZ,SAWKvC,KAOAiF,EAAoB,WAAO,IAC5BxC,EAAgByC,qBAAWrF,GAA3B4C,YACR,GAAIA,EACA,OAAOA,EAEP,MAAM,IAAI0C,MAAM,wB,sDGvClBC,EAAgBtF,wBAAuC,IA0BhDuF,EAAsB,WAAO,IAAD,EAC+BH,qBAAWE,GAAvEE,EAD6B,EAC7BA,gBAAiBC,EADY,EACZA,mBAAoBC,EADR,EACQA,mBAE7C,GAA+B,qBAApBF,GAAmCC,GAAsBC,EAChE,MAAO,CAAEF,kBAAiBC,qBAAoBC,sBAE9C,MAAM,IAAIL,OAIHM,EA9BmD,SAAC,GAAkB,IAAhBzF,EAAe,EAAfA,SAAe,EAClCE,mBAAS,IADyB,mBACzEoF,EADyE,KACxDC,EADwD,KAOhF,OACI,cAACH,EAAcP,SAAf,CACIC,MAAO,CACHQ,kBACAC,qBACAC,mBATe,SAAChC,GACxB+B,GAAmB,SAACG,GAAD,OAAWA,IAASlC,EAAc,GAAKA,OAI1D,SAOKxD,KCZA2F,EAAgB,SAACX,EAAWY,GACrC,IAAIC,EAAiC,GAarC,OAFAb,GAAQA,EAAK1B,SATU,SAACwB,EAAYgB,GAChCD,EAAUzE,KAAK,CACX2E,QAASD,EACThB,MAAOA,EAAMc,GACb3B,IAAKa,EAAMb,IACXC,KAAMY,EAAMZ,UAMb2B,G,QCrBLG,EAAS,SAAChB,GACD,IAAD,EAAV,OAAIA,GACA,UAAOnC,IAAOmC,GAAM,SAACiB,GAAD,uBAAOA,EAAEnB,aAAT,QAAkB,YAAtC,QAEO,GAOf,SAASoB,EAAWC,GAGhB,OAFYC,cACRC,QAAQF,EAAMG,OAAQH,EAAMI,MACzB,KAGX,I,MAwDe7D,EAxDgB,SAACyD,GAAmB,IACvCb,EAAoBD,IAApBC,gBACAN,EAASC,IAATD,KAEJa,EAAiCF,EAAcX,EAZ7B,UAchBwB,EAAY3D,MAEb4D,OAAO,CAAC,EAAGT,EAAOH,KAClBa,MAAM,CAAC,EAAG,OAETC,EAAQ,OAAGd,QAAH,IAAGA,OAAH,EAAGA,EAAWe,QAAO,SAACC,GAAD,OAAOA,EAAE/B,OAAS+B,EAAE5C,KAAO4C,EAAE3C,QAE1D4C,EAAmB,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAUI,MAAK,SAACC,GAAD,OAAOA,EAAEjB,UAAYT,KAO1D2B,EAA6B,CALvBH,EAAsBA,EAAoB7C,IAAM,GAC/C6C,EAAsBA,EAAoB5C,KAAO,IAKxDgD,EAAOC,kBAAQ,CAAEC,UAAW,WAAYC,KAAM,+BAAgCC,SAAU,CAAC,GAAI,MAEnG,OACI,eAACC,EAAA,EAAD,CAAcjB,OAAQW,EAAUV,KANC,EAMWiB,MAAO,CAAEC,OAAO,OAASC,MAAO,QAAUC,iBAAiB,EAAvG,UACI,cAACzB,EAAD,CAAYI,OAAQW,EAAUV,KAPD,IAQ7B,cAACqB,EAAA,EAAD,CACIC,YAAW,oJACXrG,IAAI,gEACJsG,QAAS,EACTC,QAAS,IAEZzC,GAAmB,cAAC0C,EAAA,EAAD,CAAQf,SAAUA,EAAUC,KAAMA,IACrDP,EAASsB,KAAI,SAACpB,EAAGnG,GAAO,IAAD,IACdwH,EAAM,UAAG1B,EAAUK,EAAE/B,cAAf,QAAyB,EACrC,OACI,cAACqD,EAAA,EAAD,CACI7B,OAAQ,CAAErC,IAAK4C,EAAE5C,IAAKmE,IAAKvB,EAAE3C,MAC7BgE,OAAQA,EACRG,QAAQ,EACRC,MAjDV,MAkDUC,OAAQ,EALZ,SAQI,eAACC,EAAA,EAAD,CAASC,QAAQ,EAAMC,UAAU,OAAOC,OAAQ,EAAE,EAAG,GAArD,UACI,cAAC,IAAD,CAASL,MAtDvB,MAsDc,SAAwBzB,EAAEd,UAE1B,eAAC,IAAD,qCAAoBc,EAAE/B,aAAtB,aAAoB,EAAS8D,iBAA7B,WALClI,UCnDdmI,EAfC,WACd,OACE,cAAC,IAAD,CACEC,GAAI,CACFC,WAAY,SACZC,eAAgB,SAChBtB,MAAO,OACPD,OAAQ,QALZ,SAQE,cAAC,IAAD,CAASwB,YAAY,IAAIX,MAAM,eCgEtBY,EApEyB,SAAC/C,GAAmB,IAAD,EAC3BlB,IAApBD,EAD+C,EAC/CA,KAAM7C,EADyC,EACzCA,UAEd,OACI,mCACKA,EACG,cAAC,EAAD,IAEA,eAAC,IAAD,CACI2G,GAAI,CACAK,SAAU,SACVC,WAAY,QACZC,WAAY,GACZC,iBAAkB,aAL1B,UAQI,cAAC,IAAD,CACIR,GAAI,CACAS,cAAe,SACfC,OAAQ,YACRC,YAAa,YAJrB,SAOI,cAAC,EAAD,MAGJ,cAAC,IAAD,CACIX,GAAI,CACAS,cAAe,MACfH,WAAY,QACZM,oBAAqB,WAJ7B,SAOI,eAAC,IAAD,CACIZ,GAAI,CACAM,WAAY,OACZI,OAAQ,YACRC,YAAa,WACbE,YAAa,OACbC,QAAS,GACTb,WAAY,SACZQ,cAAe,UARvB,UAWI,cAAC,IAAD,CACIT,GAAI,CACAe,SAAU,MACVC,WAAY,QAHpB,gBAMK9E,QANL,IAMKA,OANL,EAMKA,EAAM+E,OAEX,cAAC,IAAD,CACIjB,GAAI,CACAe,SAAU,MAFlB,0C,gBC3DfG,EAAQC,IAAOC,IAAV,4HAOLC,EAAOF,IAAOG,GAAV,mGAOJC,EAAWJ,IAAOK,GAAV,+RAUH,SAAAnE,GAAK,OAAIA,EAAMoE,SAAW,QAAS,MCDtCC,EAjBmB,SAACrE,GAAD,OAC9B,cAAC,IAAD,CACI2C,GAAI,CACAU,OAAQ,YACRC,YAAa,WACbgB,OAAQ,OACRC,GAAI,OACJ3B,WAAY,SACZC,eAAgB,SAChB2B,QAAS,OACTxB,SAAU,UATlB,SAYI,cAACa,EAAD,gDCqGOY,EAhHuB,SAACzE,GAAmB,IAAD,MACClB,IAA9C9C,EAD6C,EAC7CA,UAAW6C,EADkC,EAClCA,KAAM3C,EAD4B,EAC5BA,YAAaE,EADe,EACfA,YADe,EAGL8C,IAAxCC,EAH6C,EAG7CA,gBAAiBE,EAH4B,EAG5BA,mBAErBK,EAAuDF,EAAcX,EAAM,SAE3E6F,EAAwDhF,EAAUiF,MAAK,SAACxJ,EAAGyJ,GAAJ,OAAUA,EAAEjG,MAAQxD,EAAEwD,SAE3FkG,EAAqBnF,EAAUkB,MAAK,SAACC,GAAD,OAAOA,EAAEjB,UAAYT,KAE/D,OACI,eAAC,IAAD,CACIwD,GAAI,CACAQ,iBAAkB,eAClBH,SAAU,OACVE,WAAY,IAJpB,UAOI,cAAC,IAAD,CACIP,GAAI,CACAC,WAAY,SACZC,eAAgB,SAChBO,cAAe,SACf0B,gBAAiB,WACjBzB,OAAQ,YACRC,YAAa,WACbG,QAAS,iBARjB,SAWKzH,EACG,cAAC,EAAD,IAEA,qCACI,eAAC,IAAD,eAAWmD,GAAoC,eAA/C,OACA,cAAC,IAAD,CAASgD,MAAM,MAAf,SACyB,KAApBhD,EAAA,iBACKjD,QADL,IACKA,OADL,EACKA,EAAauG,wBADlB,QACsC,UADtC,OAEKoC,QAFL,IAEKA,OAFL,EAEKA,EAAoBlG,MAAM8D,wBAQhD,cAAC,IAAD,CACIE,GAAI,CACAoC,UAAW,SACX3B,cAAe,SACf0B,gBAAiB,WACjBzB,OAAQ,YACRC,YAAa,WACbV,WAAY,UAPpB,SAUK5G,EACG,cAAC,EAAD,IAEA,qCACI,cAAC,IAAD,CAAS2G,GAAI,CAAEe,SAAU,KAAMsB,UAAW,GAA1C,sBACA,cAAC,IAAD,CAASrC,GAAI,CAAEe,SAAU,MAAzB,wCAEA,cAACM,EAAD,UACKU,EAAW5C,KAAI,SAACjB,GAAD,eACZ,eAACqD,EAAD,CACIe,QAAS,kBAAM5F,EAAmBwB,EAAEjB,UACpCwE,SAAUjF,IAAoB0B,EAAEjB,QAFpC,UAII,cAAC,IAAD,CACI+C,GAAI,CACAR,MAAO,MACPqB,YAAa,GAHrB,6BAMK3C,EAAElC,aANP,aAMK,EAAS8D,wBANd,QAMkC,YAElC,eAAC,IAAD,eAAQ5B,EAAEjB,wBAQlC,cAAC,IAAD,CACI+C,GAAI,CACAmC,gBAAiB,WACjBzB,OAAQ,YACRC,YAAa,WACbF,cAAe,SACfK,QAAS,IANjB,SASKzH,EACG,cAAC,EAAD,IAEA,eAAC,IAAD,CACI2G,GAAI,CACAS,cAAe,SACfR,WAAY,UAHpB,UAMI,cAAC,IAAD,CAASD,GAAI,CAAEe,SAAU,MAAzB,6BACA,cAAC,IAAD,CAASf,GAAI,CAAEe,SAAU,MAAzB,0BAAkCtH,QAAlC,IAAkCA,OAAlC,EAAkCA,EAAaqG,wBAA/C,QAAmE,qBCtF9EyC,EAAY,SAACC,GAAD,MACb,WAARA,EAAmB,aAAuB,WAARA,EAAmB,WAAqB,cAARA,EAAsB,YAAc,YAuF3FC,EArFsB,SAACpF,GAAmB,IAAD,MACxBlB,IAApB9C,EAD4C,EAC5CA,UAAW6C,EADiC,EACjCA,KAEXM,EAAoBD,IAApBC,gBAEJO,EAAuD,GAEvD2F,EAAsB,EACtBC,EAAuB,EAEnBH,EAAQnF,EAARmF,IAEFI,EA9BwB,SAACJ,GAC/B,OAAQA,GACJ,IAAK,MACD,MAAO,WACX,IAAK,SACD,MAAO,SACX,IAAK,SACD,MAAO,SACX,IAAK,YACD,MAAO,YAGf,MAAO,WAkBcK,CAAmBL,GAexCtG,GAAQA,EAAK1B,SAbU,SAACwB,EAAoBgB,GACxCD,EAAUzE,KAAK,CACX2E,QAASD,EACThB,MAAOA,EAAM4G,KAGjBF,GAAe1G,EAAM4G,GAEjB5F,IAAQR,IACRmG,EAAe3G,EAAM4G,OAM7B,IAAIb,EAAwDhF,EAAUiF,MAAK,SAACxJ,EAAGyJ,GAAJ,OAAUA,EAAEjG,MAAQxD,EAAEwD,SAEjG,OACI,qCACI,cAAC,IAAD,CACIgE,GAAI,CACAC,WAAY,SACZC,eAAgB,SAChBO,cAAe,SACfH,WAAY,OACZI,OAAQ,qBANhB,SASKrH,EACG,cAAC,EAAD,IAEA,qCACI,cAAC,IAAD,CAASmG,MAAM,QAAf,SAAwBhD,GAAoC,WAC5D,cAAC,IAAD,CAASgD,MAAO+C,EAAUC,GAA1B,SACKhG,EACKmG,EAAa7C,iBADH,oBAEV4C,SAFU,aAEV,EAAa5C,wBAFH,QAEuB,YAE3C,eAAC,IAAD,WACK0C,EADL,IACW,iBAKvB,cAAC,IAAD,CACIxC,GAAI,CACAoC,UAAW,SACX3B,cAAe,SACfH,WAAY,OACZI,OAAQ,qBALhB,SAQKrH,EACG,cAAC,EAAD,IAEA,cAACgI,EAAD,UACKU,EAAW5C,KAAI,SAACjB,GAAD,eACZ,eAACqD,EAAD,CAAUE,SAAUjF,IAAoB0B,EAAEjB,QAA1C,UACI,cAAC,IAAD,CAAM+C,GAAI,CAAEa,YAAa,GAAKrB,MAAM,WAApC,SACKtB,EAAEjB,UAEP,cAAC,IAAD,CAAMuC,MAAO+C,EAAUC,GAAvB,6BAA8BtE,EAAElC,aAAhC,aAA8B,EAAS8D,wBAAvC,QAA2D,0BCxE5EgD,EA1BwB,SAACzF,GACpC,OACI,eAAC,IAAD,CACI2C,GAAI,CACAK,SAAU,QACVK,OAAQ,YACRC,YAAa,WACbJ,WAAY,OACZM,YAAa,OACbP,WAAY,WACZyC,IAAK,EACLC,aAAa,sDATrB,UAaI,cAAC,IAAD,CAAMhD,GAAI,CAAEK,SAAU,OAAQuB,GAAI,QAASpB,iBAAkB,aAA7D,SACI,cAAC,EAAD,CAAWgC,IAAI,UAGnB,cAAC,IAAD,CAAMxC,GAAI,CAAEK,SAAU,QAASuB,GAAI,QAASpB,iBAAkB,QAA9D,SACI,cAAC,EAAD,CAAWgC,IAAI,oBCHhBS,EAlBkB,WAC7B,OACI,eAAC,IAAD,CACIF,IAAK,EACL/C,GAAI,CACAkD,kBAAkB,6CAClBtC,oBAAqB,cACrBJ,iBAAkB,YAL1B,UAQI,cAAC,EAAD,IAEA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QC6DG2C,EAlFD,CACVC,MAAO,CACHC,KAAM,+EACNC,QAAS,4BACTC,UAAW,oBAEfC,OAAQ,CACJC,KAAM,UACNnD,WAAY,UACZoD,QAAS,UACTC,IAAK,UACLL,QAAS,OACTM,KAAM,CACFC,GAAI,UACJC,GAAI,UACJC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,OACLC,IAAK,WAETC,KAAM,CACFN,GAAI,UACJC,IAAK,UACLC,IAAK,UACLC,IAAK,WAETI,MAAO,CACHP,GAAI,UACJC,IAAK,UACLC,IAAK,UACLC,IAAK,WAETK,OAAQ,CACJR,GAAI,UACJC,IAAK,UACLC,IAAK,UACLC,IAAK,YAGbM,UAAW,CACPC,GAAI,UACJC,GAAI,WACJC,GAAI,OACJC,GAAI,WACJC,GAAI,UACJ,MAAO,SACP,MAAO,WACP,MAAO,UACP,MAAO,OACP,MAAO,UACP,MAAO,SACP,MAAO,OACP,MAAO,OACPtB,QAAS,OAEbuB,YAAa,CACTC,SAAU,IACVC,KAAM,IACNC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,SAAU,IACVC,KAAM,IACNC,UAAW,IACXC,MAAO,IACPhC,QAAS,KAEbG,KAAM,CACF8B,KAAM,CACFC,cAAe,YACfC,cAAe,SAEnBnC,QAAS,CACLoC,WAAY,UACZ1E,WAAY,UACZ2E,WAAY,UACZnG,MAAO,a,UCzDJoG,GAZH,WACR,OACI,cAAC,KAAD,CAAezC,MAAOA,EAAtB,SACI,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,WCCL0C,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.09fcdb78.chunk.js","sourcesContent":["export const TIMESERIES_CSV_URL = {\n    CONFIRMED:\n        //   process.env.NODE_ENV === \"development\"\n        //   ? \"time_series_covid19_confirmed_global.csv\"\n        'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv',\n    DEATHS:\n        process.env.NODE_ENV === 'development'\n            ? 'time_series_covid19_deaths_global.csv'\n            : 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv'\n};\n\nexport const DAILY_BASE_URL =\n    'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/';\n","import React, { ReactNode, createContext, useContext } from 'react';\nimport { TIMESERIES_CSV_URL } from '../constants';\nimport { useTimeSeriesData } from '../hooks/useTimeSeriesData';\nimport { useDailyUrl } from '../hooks/useDailyUrl';\nimport { IDataContext } from '../types';\nconst DataContext = createContext<Partial<IDataContext>>({});\n\ninterface DataContextProviderProps {\n    children: ReactNode;\n}\n\nconst DataContextProvider: React.FC<DataContextProviderProps> = ({ children }) => {\n    const error = 'this is error';\n\n    const dailyUrl = useDailyUrl(); //`https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/04-09-2021.csv`;\n\n    console.log(`dailyUrl=${dailyUrl}`);\n\n    const [countryConfirmedTimeSeries, globalConfirmedTimeSeries, lastUpdated, isLoading] = useTimeSeriesData(\n        TIMESERIES_CSV_URL.CONFIRMED,\n        dailyUrl\n    );\n\n    return (\n        <DataContext.Provider\n            value={{\n                countryData: {\n                    isLoading,\n                    error,\n                    data: countryConfirmedTimeSeries,\n                    globalCases: globalConfirmedTimeSeries,\n                    lastUpdated\n                }\n            }}\n        >\n            {children}\n        </DataContext.Provider>\n    );\n};\n\nexport default DataContextProvider;\n\nexport const useCountryDataCtx = () => {\n    const { countryData } = useContext(DataContext);\n    if (countryData) {\n        return countryData;\n    } else {\n        throw new Error('dailyData is empty.');\n    }\n};\n","import Axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { DAILY_BASE_URL } from '../constants';\n\nexport const useDailyUrl = (): string => {\n    const [dataUrl, setDataUrl] = useState('');\n\n    useEffect(() => {\n        const getFilesNames = (): string[] => {\n            // const today = new Date();\n            // const todayStr = today.toISOString().split('T')[0];\n            // today.setDate(today.getDate() - 1);\n            // const ydayStr = today.toISOString().split('T')[0];\n            // const todayArr = todayStr.split('-');\n            // const ydayArr = ydayStr.split('-');\n\n            // return [\n            //     `${todayArr[2]}-${todayArr[1]}-${todayArr[0]}.csv`,\n            //     `${ydayArr[2]}-${ydayArr[1]}-${ydayArr[0]}.csv`\n            // ];\n\n            const today = new Date();\n            let files: string[] = [];\n            for (let i = 0; i < 4; i++) {\n                const year = today.getFullYear();\n                const month = (today.getMonth() + 1).toString().padStart(2, '0');\n                const date = today.getDate().toString().padStart(2, '0');\n                const fileName = `${month}-${date}-${year}.csv`;\n                files.push(fileName);\n                today.setDate(today.getDate() - 1);\n            }\n            return files;\n        };\n\n        async function getUrl() {\n            const files = getFilesNames();\n\n            for (const file of files) {\n                try {\n                    const url = DAILY_BASE_URL + file;\n                    const res = await Axios.get(url);\n                    const status = res.status;\n                    if (status === 200) {\n                        setDataUrl(url);\n                        break;\n                    }\n                } catch {\n                    // csv files are not found. handle this error.\n                }\n            }\n        }\n\n        getUrl();\n    }, []);\n\n    return dataUrl;\n};\n","import * as d3 from 'd3';\nimport { useEffect, useState } from 'react';\nimport { CountryData } from '../types';\n\nexport const useTimeSeriesData = (\n    url: string,\n    daylyUrl: string\n): [Map<string, CountryData> | null, Number, string, boolean] => {\n    const [countriesData, setCountriesData] = useState<Map<string, CountryData> | null>(null);\n\n    const [isLoading, setIsLoading] = useState(true);\n\n    const [globalCases, setGlobalCases] = useState(0);\n    const [lastUpdated, setLastUpdated] = useState('');\n\n    let countryData = new Map();\n\n    useEffect(() => {\n        debugger;\n        setIsLoading(true);\n        let glCases = 0;\n        let updatedTime: string = '';\n\n        const fetchTimeSeries = async () => {\n            const loadedData = await d3.csv(url);\n\n            const columnCount = Object.keys(loadedData[0]).length;\n            const columns = loadedData['columns'];\n            const lastColumnName = columns[columnCount - 1];\n            const prevColumnName = columns[columnCount - 2];\n\n            loadedData.forEach((row) => {\n                const countryName = row['Country/Region'];\n                if (!countryData.has(countryName)) {\n                    countryData.set(countryName, {\n                        today: Number(row[lastColumnName]),\n                        yesterday: Number(row[prevColumnName]),\n                        newCases: Number(row[lastColumnName]) - Number(row[prevColumnName]),\n                        lat: Number(row['Lat']) ? Number(row['Lat']) : 0,\n                        long: Number(row['Long']) ? Number(row['Long']) : 0\n                    });\n                    glCases += Number(row[lastColumnName]);\n                } else {\n                    const countryCases = countryData.get(countryName);\n                    const updatedCasesToday = Number(row[lastColumnName]) + Number(countryCases.today);\n                    const updatedCasesYday = Number(row[prevColumnName]) + Number(countryCases.yesterday);\n                    countryData.set(countryName, {\n                        today: updatedCasesToday,\n                        yesterday: updatedCasesYday,\n                        newCases: updatedCasesToday - updatedCasesYday\n                    });\n                    glCases += Number(row[lastColumnName]);\n                }\n            });\n\n            const dailyData = await d3.csv(daylyUrl);\n\n            dailyData.forEach((row) => {\n                const countryName = row['Country_Region'];\n\n                if (!updatedTime) {\n                    updatedTime = row['Last_Update'] ? row['Last_Update'] : '';\n                }\n\n                const rowActive = Number(row['Active']) ? Number(row['Active']) : 0;\n                const rowDeaths = Number(row['Deaths']) ? Number(row['Deaths']) : 0;\n                const rowRecovered = Number(row['Recovered']) ? Number(row['Recovered']) : 0;\n\n                if (!countryData.has(countryName)) {\n                    countryData.set(countryName, {\n                        active: rowActive,\n                        deaths: rowDeaths,\n                        recovered: rowRecovered,\n                        lat: row['Lat'],\n                        long: row['Long_']\n                    });\n                } else {\n                    const countryCases = countryData.get(countryName);\n\n                    const active = countryCases.active ?? 0;\n                    const deaths = countryCases.deaths ?? 0;\n                    const recovered = countryCases.recovered ?? 0;\n\n                    countryData.set(countryName, {\n                        ...countryCases,\n                        active: active + rowActive,\n                        deaths: deaths + rowDeaths,\n                        recovered: recovered + rowRecovered\n                    });\n                }\n            });\n\n            setCountriesData(countryData);\n            setIsLoading(false);\n            setGlobalCases(glCases);\n            setLastUpdated(updatedTime);\n        };\n\n        if (daylyUrl) fetchTimeSeries();\n    }, [url, daylyUrl]);\n\n    return [countriesData, globalCases, lastUpdated, isLoading];\n};\n","import React, { ReactNode, createContext, useContext, useState } from 'react';\n\nexport interface ISelectContext {\n    selectedCountry: string;\n    setSelectedCountry: React.Dispatch<React.SetStateAction<string>>;\n    handleCountryClick: (countryName: string) => void;\n}\n\nconst SelectContext = createContext<Partial<ISelectContext>>({});\n\ninterface DataContextProviderProps {\n    children: ReactNode;\n}\n\nconst SelectContextProvider: React.FC<DataContextProviderProps> = ({ children }) => {\n    const [selectedCountry, setSelectedCountry] = useState('');\n\n    const handleCountryClick = (countryName: string) => {\n        setSelectedCountry((prev) => (prev === countryName ? '' : countryName));\n    };\n\n    return (\n        <SelectContext.Provider\n            value={{\n                selectedCountry,\n                setSelectedCountry,\n                handleCountryClick\n            }}\n        >\n            {children}\n        </SelectContext.Provider>\n    );\n};\n\nexport const useSelectCountryCtx = () => {\n    const { selectedCountry, setSelectedCountry, handleCountryClick } = useContext(SelectContext);\n\n    if (typeof selectedCountry !== 'undefined' && setSelectedCountry && handleCountryClick) {\n        return { selectedCountry, setSelectedCountry, handleCountryClick };\n    } else {\n        throw new Error();\n    }\n};\n\nexport default SelectContextProvider;\n","import { TCountryData } from '../types';\n\nexport const changeBg = (selected: string, countryName: string) => (selected === countryName ? 'black' : 'none');\n\nexport const definePropertyName = (tag: string): string => {\n    switch (tag) {\n        case 'new':\n            return 'newCases';\n        case 'active':\n            return 'active';\n    }\n    return 'newCases';\n};\n\nexport const pickColor = (tag: string): string =>\n    tag === 'active' ? 'yellow.500' : tag === 'deaths' ? 'gray.500' : tag === 'recovered' ? 'green.500' : 'pink';\n\nexport const iterateViaMap = (data: any, dataClass: string): Array<TCountryData> => {\n    let dataArray: Array<TCountryData> = [];\n\n    const logMapElements = (value: any, key: string) => {\n        dataArray.push({\n            country: key,\n            value: value[dataClass],\n            lat: value.lat,\n            long: value.long\n        });\n    };\n\n    data && data.forEach(logMapElements);\n\n    return dataArray;\n};\n","import React from 'react';\nimport * as d3 from 'd3';\nimport { MapContainer, Tooltip, Circle, TileLayer, useMap, Marker } from 'react-leaflet';\nimport { IProps, TCountryData, MapProps } from '../types';\nimport { useCountryDataCtx } from '../context/dataContext';\nimport { useSelectCountryCtx } from '../context/selectContext';\nimport { iterateViaMap } from '../utils/utils';\nimport { Heading, Text } from 'theme-ui';\nimport { divIcon } from 'leaflet';\n\nconst getMax = (data: Array<TCountryData> | null) => {\n    if (data) {\n        return d3.max(data, (D) => D.value ?? 0) ?? 0;\n    } else {\n        return 0;\n    }\n};\n\nconst color = 'red';\nconst dataClass: string = 'active';\n\nfunction ChangeView(props: MapProps) {\n    const map = useMap();\n    map.setView(props.center, props.zoom);\n    return null;\n}\n\nconst Map: React.SFC<IProps> = (props: IProps) => {\n    const { selectedCountry } = useSelectCountryCtx();\n    const { data } = useCountryDataCtx();\n\n    let dataArray: Array<TCountryData> = iterateViaMap(data, dataClass);\n\n    const getRadius = d3\n        .scaleSqrt()\n        .domain([0, getMax(dataArray)])\n        .range([0, 430000]);\n\n    const filtered = dataArray?.filter((d) => d.value && d.lat && d.long);\n\n    const selectedCountryData = filtered?.find((x) => x.country === selectedCountry);\n\n    const lat = selectedCountryData ? selectedCountryData.lat : 20;\n    const long = selectedCountryData ? selectedCountryData.long : 10;\n\n    let zoom: number = selectedCountry ? 2 : 2;\n\n    const position: [number, number] = [lat, long];\n    const icon = divIcon({ className: 'css-icon', html: '<div class=\"gps_ring\"></div>', iconSize: [50, 50] });\n\n    return (\n        <MapContainer center={position} zoom={zoom} style={{ height: `100%`, width: '100%' }} scrollWheelZoom={false}>\n            <ChangeView center={position} zoom={zoom} />\n            <TileLayer\n                attribution={`&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>`}\n                url=\"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png\"\n                maxZoom={8}\n                minZoom={2}\n            />\n            {selectedCountry && <Marker position={position} icon={icon}></Marker>}\n            {filtered.map((d, i) => {\n                const radius = getRadius(d.value) ?? 0;\n                return (\n                    <Circle\n                        center={{ lat: d.lat, lng: d.long }}\n                        radius={radius}\n                        stroke={true}\n                        color={color}\n                        weight={1}\n                        key={i}\n                    >\n                        <Tooltip sticky={true} direction=\"left\" offset={[-2, 0]}>\n                            <Heading color={color}>{d.country}</Heading>\n\n                            <Text> Total Cases:{d.value?.toLocaleString()} </Text>\n                        </Tooltip>\n                    </Circle>\n                );\n            })}\n        </MapContainer>\n    );\n};\n\nexport default Map;\n","import { Flex, Spinner } from 'theme-ui';\nimport React from 'react';\n\nconst Loading = () => {\n  return (\n    <Flex\n      sx={{\n        alignItems: 'center',\n        justifyContent: 'center',\n        width: '100%',\n        height: '100%'\n      }}\n    >\n      <Spinner strokeWidth=\"4\" color=\"red.500\" />\n    </Flex>\n  );\n};\n\nexport default Loading;\n","import * as React from 'react';\nimport { Grid, Flex, Heading, Text } from 'theme-ui';\nimport { useCountryDataCtx } from '../context/dataContext';\nimport News from './News';\nimport Map from './Map';\nimport Loading from './Loading';\n\ninterface IProps {}\n\nconst CenterColumn: React.SFC<IProps> = (props: IProps) => {\n    const { data, isLoading } = useCountryDataCtx();\n\n    return (\n        <>\n            {isLoading ? (\n                <Loading />\n            ) : (\n                <Grid\n                    sx={{\n                        gridArea: 'center',\n                        background: 'black',\n                        marginLeft: 10,\n                        gridTemplateRows: 'auto 80px'\n                    }}\n                >\n                    <Flex\n                        sx={{\n                            flexDirection: 'column',\n                            border: '1px solid',\n                            borderColor: 'gray.700'\n                        }}\n                    >\n                        <Map />\n                    </Flex>\n\n                    <Flex\n                        sx={{\n                            flexDirection: 'row',\n                            background: 'black',\n                            gridTemplateColumns: '6fr 9fr'\n                        }}\n                    >\n                        <Flex\n                            sx={{\n                                background: '#222',\n                                border: '1px solid',\n                                borderColor: 'gray.700',\n                                marginRight: '10px',\n                                padding: 10,\n                                alignItems: 'center',\n                                flexDirection: 'column'\n                            }}\n                        >\n                            <Heading\n                                sx={{\n                                    fontSize: '3xl',\n                                    fontWeight: 'bold'\n                                }}\n                            >\n                                {data?.size}\n                            </Heading>\n                            <Text\n                                sx={{\n                                    fontSize: 'xs'\n                                }}\n                            >\n                                countries/regions\n                            </Text>\n                        </Flex>\n                        {/* <News /> */}\n                    </Flex>\n                </Grid>\n            )}\n        </>\n    );\n};\n\nexport default CenterColumn;\n","import styled from 'styled-components';\n\nexport const Title = styled.div`\n    font-size: 1.6994866rem;\n    line-height: 1.3875;\n    color: #bdbdbd;\n    height: 44px;\n`;\n\nexport const List = styled.ul`\n    list-style-type: none;\n    margin: 0;\n    padding-left: 0;\n   \n`;\n\nexport const ListItem = styled.li` \n    padding-top: 0.5rem;\n    padding-bottom: 0.5rem;\n    border-bottom: 1px solid #5c5c5c;\n    padding-left:10px;\n    font-size: 1.1019rem;\n    font-weight: normal;\n    text-align: left;\n    display: flex;\n    cursor: pointer;\n    background: ${props => props.selected ? 'black': ''};\n`;\n\n\n\n\n\n\n","import * as React from 'react';\nimport { Title } from './Styled';\nimport { Flex } from 'theme-ui';\n\ninterface IProps {\n    name?: string;\n}\n\nconst Header: React.SFC<IProps> = (props: IProps) => (\n    <Flex\n        sx={{\n            border: '1px solid',\n            borderColor: 'gray.700',\n            margin: '10px',\n            bg: '#222',\n            alignItems: 'center',\n            justifyContent: 'center',\n            display: 'flex',\n            gridArea: 'header'\n        }}\n    >\n        <Title>Covid-19 Information Dashboard</Title>\n    </Flex>\n);\n\nexport default Header;\n","import * as React from 'react';\n\nimport { useCountryDataCtx } from '../context/dataContext';\nimport { useSelectCountryCtx } from '../context/selectContext';\nimport { Grid, Flex, Heading, Text } from 'theme-ui';\nimport { List, ListItem } from './Styled';\nimport Loading from './Loading';\nimport { IProps } from '../types';\nimport { iterateViaMap } from '../utils/utils';\n\nconst LeftColumn: React.SFC<IProps> = (props: IProps) => {\n    const { isLoading, data, globalCases, lastUpdated } = useCountryDataCtx();\n\n    const { selectedCountry, handleCountryClick } = useSelectCountryCtx();\n\n    let dataArray: Array<{ country: string; value: number }> = iterateViaMap(data, 'today');\n\n    let sortedData: Array<{ country: string; value: number }> = dataArray.sort((a, b) => b.value - a.value);\n\n    const selectedCountryObj = dataArray.find((x) => x.country === selectedCountry);\n\n    return (\n        <Grid\n            sx={{\n                gridTemplateRows: '1fr 15fr 2fr',\n                gridArea: 'left',\n                marginLeft: 10\n            }}\n        >\n            <Flex\n                sx={{\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    flexDirection: 'column',\n                    backgroundColor: 'gray.600',\n                    border: '1px solid',\n                    borderColor: 'gray.700',\n                    padding: '10px 0 10px 0'\n                }}\n            >\n                {isLoading ? (\n                    <Loading />\n                ) : (\n                    <>\n                        <Heading> {selectedCountry ? selectedCountry : 'Global Cases'} </Heading>\n                        <Heading color=\"red\">\n                            {selectedCountry === ''\n                                ? globalCases?.toLocaleString() ?? 'No data'\n                                : selectedCountryObj?.value.toLocaleString()}\n\n                            {}\n                        </Heading>\n                    </>\n                )}\n            </Flex>\n\n            <Flex\n                sx={{\n                    overflowY: 'scroll',\n                    flexDirection: 'column',\n                    backgroundColor: 'gray.600',\n                    border: '1px solid',\n                    borderColor: 'gray.700',\n                    alignItems: 'center'\n                }}\n            >\n                {isLoading ? (\n                    <Loading />\n                ) : (\n                    <>\n                        <Heading sx={{ fontSize: 'md', marginTop: 2 }}>Cases by</Heading>\n                        <Heading sx={{ fontSize: 'xs' }}>Country/Region/Sovereignty</Heading>\n\n                        <List>\n                            {sortedData.map((x) => (\n                                <ListItem\n                                    onClick={() => handleCountryClick(x.country)}\n                                    selected={selectedCountry === x.country}\n                                >\n                                    <Text\n                                        sx={{\n                                            color: 'red',\n                                            marginRight: 2\n                                        }}\n                                    >\n                                        {x.value?.toLocaleString() ?? 'No data'}\n                                    </Text>\n                                    <Text> {x.country}</Text>\n                                </ListItem>\n                            ))}\n                        </List>\n                    </>\n                )}\n            </Flex>\n\n            <Flex\n                sx={{\n                    backgroundColor: 'gray.600',\n                    border: '1px solid',\n                    borderColor: 'gray.700',\n                    flexDirection: 'column',\n                    padding: 10\n                }}\n            >\n                {isLoading ? (\n                    <Loading />\n                ) : (\n                    <Flex\n                        sx={{\n                            flexDirection: 'column',\n                            alignItems: 'center'\n                        }}\n                    >\n                        <Heading sx={{ fontSize: 'xs' }}>Last Updated at</Heading>\n                        <Heading sx={{ fontSize: 'md' }}>{lastUpdated?.toLocaleString() ?? 'No data'}</Heading>\n                    </Flex>\n                )}\n            </Flex>\n        </Grid>\n    );\n};\n\nexport default LeftColumn;\n","import * as React from 'react';\nimport { Flex, Heading, Text } from 'theme-ui';\nimport { List, ListItem } from './Styled';\nimport { useSelectCountryCtx } from '../context/selectContext';\nimport { useCountryDataCtx } from '../context/dataContext';\nimport { CountryData } from '../types';\nimport Loading from './Loading';\n//import { definePropertyName, pickColor } from '../utils/utils';\n\ninterface IProps {\n    tag: string;\n}\n\nexport const definePropertyName = (tag: string): string => {\n    switch (tag) {\n        case 'new':\n            return 'newCases';\n        case 'active':\n            return 'active';\n        case 'deaths':\n            return 'deaths';\n        case 'recovered':\n            return 'recovered';\n    }\n\n    return 'newCases';\n};\n\nexport const pickColor = (tag: string): string =>\n    tag === 'active' ? 'purple.400' : tag === 'deaths' ? 'gray.500' : tag === 'recovered' ? 'green.500' : 'pink.400';\n\nconst CasesList: React.SFC<IProps> = (props: IProps) => {\n    const { isLoading, data } = useCountryDataCtx();\n\n    const { selectedCountry } = useSelectCountryCtx();\n\n    let dataArray: Array<{ country: string; value: number }> = [];\n\n    let globalCount: number = 0;\n    let countryCount: number = 0;\n\n    const { tag } = props;\n\n    const propertyName = definePropertyName(tag);\n\n    const logMapElements = (value: CountryData, key: string) => {\n        dataArray.push({\n            country: key,\n            value: value[propertyName as keyof CountryData]\n        });\n\n        globalCount += value[propertyName as keyof CountryData];\n\n        if (key === selectedCountry) {\n            countryCount = value[propertyName as keyof CountryData];\n        }\n    };\n\n    data && data.forEach(logMapElements);\n\n    let sortedData: Array<{ country: string; value: number }> = dataArray.sort((a, b) => b.value - a.value);\n\n    return (\n        <>\n            <Flex\n                sx={{\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    flexDirection: 'column',\n                    background: '#222',\n                    border: '1px solid #363636'\n                }}\n            >\n                {isLoading ? (\n                    <Loading />\n                ) : (\n                    <>\n                        <Heading color=\"white\">{selectedCountry ? selectedCountry : 'Global'}</Heading>\n                        <Heading color={pickColor(tag)}>\n                            {selectedCountry\n                                ? countryCount.toLocaleString()\n                                : globalCount?.toLocaleString() ?? 'No data'}\n                        </Heading>\n                        <Heading>\n                            {tag} {' cases'}\n                        </Heading>\n                    </>\n                )}\n            </Flex>\n            <Flex\n                sx={{\n                    overflowY: 'scroll',\n                    flexDirection: 'column',\n                    background: '#222',\n                    border: '1px solid #363636'\n                }}\n            >\n                {isLoading ? (\n                    <Loading />\n                ) : (\n                    <List>\n                        {sortedData.map((x) => (\n                            <ListItem selected={selectedCountry === x.country}>\n                                <Text sx={{ marginRight: 2 }} color=\"gray.100\">\n                                    {x.country}\n                                </Text>\n                                <Text color={pickColor(tag)}>{x.value?.toLocaleString() ?? 'No data'}</Text>\n                            </ListItem>\n                        ))}\n                    </List>\n                )}\n            </Flex>\n        </>\n    );\n};\n\nexport default CasesList;\n","import * as React from 'react';\nimport { Grid } from 'theme-ui';\n\nimport CasesList from './CasesList';\ninterface IProps {\n    name?: string;\n}\n\nconst RightColumn: React.SFC<IProps> = (props: IProps) => {\n    return (\n        <Grid\n            sx={{\n                gridArea: 'right',\n                border: '1px solid',\n                borderColor: 'gray.700',\n                marginLeft: '10px',\n                marginRight: '10px',\n                background: 'gray.600',\n                gap: 1,\n                gridTemplate: `\"Left Right\" 6fr\n                \"Left Right\" 6fr`\n            }}\n        >\n            <Grid sx={{ gridArea: 'Left', bg: 'black', gridTemplateRows: 'auto auto' }}>\n                <CasesList tag=\"new\" />\n            </Grid>\n\n            <Grid sx={{ gridArea: 'Right', bg: 'black', gridTemplateRows: 'auto' }}>\n                <CasesList tag=\"recovered\" />\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default RightColumn;\n","import React from 'react';\nimport CenterColumn from './CenterColumn';\nimport Header from './Header';\nimport LeftColumn from './LeftColumn';\nimport RightColumn from './RightColumn';\nimport { Grid } from 'theme-ui';\n\nconst Dashboard: React.SFC<{}> = () => {\n    return (\n        <Grid\n            gap={0}\n            sx={{\n                gridTemplateAreas: `\"header header header\" \"left center right\"`,\n                gridTemplateColumns: '3fr 9fr 5fr',\n                gridTemplateRows: '9vh 90vh'\n            }}\n        >\n            <Header />\n\n            <LeftColumn />\n            <CenterColumn />\n            <RightColumn />\n        </Grid>\n    );\n};\nexport default Dashboard;\n","const theme = {\n    fonts: {\n        body: 'Avenir Next W01,Avenir Next W00,Avenir Next,Avenir,Helvetica Neue,sans-serif',\n        heading: '\"Avenir Next\", sans-serif',\n        monospace: 'Menlo, monospace'\n    },\n    colors: {\n        text: '#d6d6d6',\n        background: '#000000',\n        primary: '#e60000',\n        red: '#e60000',\n        heading: '#fff',\n        gray: {\n            10: '#bdbdbd',\n            50: '#f7fafc',\n            200: '#E2E8F0',\n            400: '#A0AEC0',\n            500: '#718096',\n            600: '#222',\n            700: '#363636'\n        },\n        pink: {\n            50: '#FFF5F7',\n            200: '#9AE6B4',\n            400: '#ED64A6',\n            500: '#D53F8C'\n        },\n        green: {\n            50: '#F0FFF4',\n            200: '#FBB6CE',\n            400: '#48BB78',\n            500: '#38A169'\n        },\n        purple: {\n            50: '#FAF5FF',\n            200: '#D6BCFA',\n            400: '#9F7AEA',\n            500: '#805AD5'\n        }\n    },\n    fontSizes: {\n        xs: '0.75rem',\n        sm: '0.875rem',\n        md: '1rem',\n        lg: '1.125rem',\n        xl: '1.25rem',\n        '2xl': '1.5rem',\n        '3xl': '1.875rem',\n        '4xl': '2.25rem',\n        '5xl': '3rem',\n        '6xl': '3.75rem',\n        '7xl': '4.5rem',\n        '8xl': '6rem',\n        '9xl': '8rem',\n        heading: '2xl'\n    },\n    fontWeights: {\n        hairline: 100,\n        thin: 200,\n        light: 300,\n        normal: 400,\n        medium: 500,\n        semibold: 600,\n        bold: 700,\n        extrabold: 800,\n        black: 900,\n        heading: 500\n    },\n    text: {\n        caps: {\n            textTransform: 'uppercase',\n            letterSpacing: '0.2em'\n        },\n        heading: {\n            fontFamily: 'heading',\n            fontWeight: 'heading',\n            lineHeight: 'heading',\n            color: 'heading'\n        }\n    }\n};\n\nexport default theme;\n","import React from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport DataContextProvider from './context/dataContext';\nimport SelectContextProvider from './context/selectContext';\nimport theme from './theme';\nimport { ThemeProvider } from 'theme-ui';\n\nconst App = () => {\n    return (\n        <ThemeProvider theme={theme}>\n            <SelectContextProvider>\n                <DataContextProvider>\n                    <Dashboard />\n                </DataContextProvider>\n            </SelectContextProvider>\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}